import java.text.SimpleDateFormat

buildscript{
    repositories {
        gradlePluginPortal()
    }
    dependencies {
        classpath 'com.github.johnrengelman:shadow:8.1.1'
    }
}

allprojects {
    apply plugin: 'maven-publish'
    apply plugin: "java"
    apply plugin: 'com.github.johnrengelman.shadow'

    group 'cn.jjaw.ktg8'
    version '8.0.8'

    // java版本
    def targetJavaVersion = 17
    java {
        withSourcesJar()
        def javaVersion = JavaVersion.toVersion(targetJavaVersion)
        sourceCompatibility = javaVersion
        targetCompatibility = javaVersion
        if (JavaVersion.current() < javaVersion) {
            toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
        }
    }
    tasks.withType(JavaCompile).configureEach {
        if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
            options.release = targetJavaVersion
        }
    }

    repositories {
        maven {
            url 'https://maven.aliyun.com/repository/public/'
        }
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }

    // 打包sourcesJar任务
    publishing {
        publications {
            myPublish(MavenPublication){
                from components.java
            }
        }
        repositories {
            maven {
                name = 'GitHubPackages'
                url = uri("https://maven.pkg.github.com/jianjianai/knapsacktogo8")
                credentials {
                    username = project.findProperty("github.user.name") ?: System.getenv("GITHUB_ACTOR")
                    password = project.findProperty("github.user.token") ?: System.getenv("GITHUB_TOKEN")
                }
            }
        }
    }
}

//构建开发版
task bulidAllJar(type: Copy) {
    dependsOn(clean)

    def devVersion = new SimpleDateFormat("yy.M.d.HHmmss").format(new Date())+"-dev";
    def jarFiles = subprojects.collect { subproject ->
        subproject.tasks.matching { task -> {
            return task.name == 'jar' || task.name == 'shadowJar'
        } }.collect { task ->
            task.outputs.files
        }
    }.flatten()
    from jarFiles
    into './build/jars' // 目标文件目录
    eachFile { details ->
        details.path = details.path.replace(version,devVersion)
    }

    doLast{
        //创建版本文件
        var buildFile = new File("./build");
        buildFile.mkdirs();
        var versionFile = new File(buildFile,"version.txt");
        versionFile.text = devVersion;
    }
}


//构建正式发行版
task bulidOfficialReleases(type: Copy){
    dependsOn(clean)

    def buildList = Arrays.asList(
            "ktg8-server",
            "ktg8-spigot"
    );
    def jarFiles = subprojects.collect { subproject ->
        println subproject.name;
        if (buildList.contains(subproject.name)){
            subproject.tasks.matching { task -> {
                return task.name == 'jar' || task.name == 'shadowJar'
            } }.collect { task ->
                task.outputs.files
            }
        }
    }.flatten()
    from jarFiles
    into './build/jars' // 目标文件目录

    doLast{
        //创建版本文件
        var buildFile = new File("./build");
        buildFile.mkdirs();
        var versionFile = new File(buildFile,"version.txt");
        versionFile.text = version;
    }
}
